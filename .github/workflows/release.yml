name: Build and Release

on:
  release:
    types: [created]

permissions:
  contents: write
  actions: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from release
        id: version
        run: |
          # Extract version from release tag (remove 'v' prefix if present)
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"
          cache-dependency-path: frontend/yarn.lock

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install frontend dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Build using Docker with version
        env:
          BUILD_VERSION: ${{ steps.version.outputs.version }}
        run: |
          chmod +x build*.sh
          ./build.sh
      - name: Calculate checksums
        working-directory: frontend
        run: |
          # Fix permissions first (Docker creates files as root)
          sudo chown -R $(whoami):$(whoami) dist/ || echo "‚ö†Ô∏è  Could not fix permissions"

          # Verify we have the dist directory
          if [ ! -d "dist" ]; then
            echo "‚ùå Error: dist directory not found"
            echo "Available directories:"
            ls -la
            exit 1
          fi

          echo "üìÅ Files in dist directory:"
          ls -la dist/

          cd dist
          rm -f checksums.txt
          for file in *.exe *.AppImage *.deb *.rpm *.tar.gz *.zip; do
            if [ -f "$file" ]; then
              echo "Calculating checksum for: $file"
              sha256sum "$file" >> checksums.txt
            fi
          done

          if [ -f "checksums.txt" ]; then
            echo "üìã Generated checksums:"
            cat checksums.txt
          else
            echo "‚ö†Ô∏è  No build artifacts found to checksum"
            touch checksums.txt
          fi

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd frontend/dist

          # Check if we have any files to upload
          FILES_TO_UPLOAD=0
          for file in *.exe *.AppImage *.deb *.rpm *.tar.gz *.zip; do
            if [ -f "$file" ]; then
              FILES_TO_UPLOAD=$((FILES_TO_UPLOAD + 1))
            fi
          done

          if [ $FILES_TO_UPLOAD -eq 0 ]; then
            echo "‚ùå No build artifacts found to upload!"
            echo "Available files in frontend/dist:"
            ls -la
            exit 1
          fi

          echo "üì¶ Found $FILES_TO_UPLOAD files to upload"

          # Upload all build artifacts to the release
          for file in *.exe *.AppImage *.deb *.rpm *.tar.gz *.zip; do
            if [ -f "$file" ]; then
              echo "üì§ Uploading $file"
              gh release upload ${{ github.event.release.tag_name }} "$file" --clobber
            fi
          done

          # Upload checksums
          if [ -f "checksums.txt" ]; then
            echo "üì§ Uploading checksums.txt"
            gh release upload ${{ github.event.release.tag_name }} "checksums.txt" --clobber
          else
            echo "‚ö†Ô∏è  No checksums.txt file found"
          fi

          echo "‚úÖ All artifacts uploaded successfully"

      - name: Update release body with installation instructions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get current release body
          CURRENT_BODY=$(gh release view ${{ github.event.release.tag_name }} --json body --jq '.body')

          # Append installation instructions to existing content
          INSTALLATION_SECTION="

          ## Installation

          ### Windows
          - **Installer** (recommended): Download the \`.exe\` installer
          - **Portable**: Download the portable \`.exe\` version

          ### Linux
          - **AppImage** (recommended): Download the \`.AppImage\` file
          - **Debian/Ubuntu**: Download the \`.deb\` package
          - **Fedora/RHEL/CentOS**: Download the \`.rpm\` package
          - **Portable**: Download the \`.tar.gz\` archive

          **Note**: Package manager support (Chocolatey, Winget, Snap, Flatpak, etc.) is planned for future releases.

          ## Checksums
          See \`checksums.txt\` for SHA256 checksums of all files."

          # Combine existing content with installation instructions
          COMBINED_BODY="${CURRENT_BODY}${INSTALLATION_SECTION}"

          # Update release with combined content
          gh release edit ${{ github.event.release.tag_name }} --notes "$COMBINED_BODY"
          echo "‚úÖ Appended installation instructions to existing release notes"
